{
    "version": "https://jsonfeed.org/version/1",
    "title": "RSS Feed | HyperUI",
    "home_page_url": "https://www.hyperui.dev/rss.xml",
    "feed_url": "https://www.hyperui.dev/rss.json",
    "description": "RSS feed for Tailwind CSS blog posts on HyperUI.",
    "icon": "https://www.hyperui.dev/og.jpg",
    "author": {
        "name": "Mark Mead",
        "url": "https://www.markmead.dev/"
    },
    "items": [
        {
            "id": "animated-border-gradient-with-tailwindcss",
            "content_html": "\nCreating a nice animated border should be difficult and with Tailwind CSS... messy. However, here's the approach that I took which was easy and clean.\n\n## Faking the Border\n\nFirst, we need our interactive element, for this example, I'll use an `<a>` to have a \"border\" which we are faking by using a background color and padding.\n\n```html\n<a href=\"#\" class=\"inline-block bg-white p-0.5\">\n  <span class=\"block px-5 py-3 text-white bg-slate-900\"> Get Started </span>\n</a>\n```\n\nInside that, we add a `<span>` that will have the text content of the element, as well as apply the padding that we desire for our button/link.\n\n## Adding the Gradient\n\nNext, we need to add the gradient.\n\nI'm going to use a pre-made Tailwind CSS gradient from [Hypercolor](https://hypercolor.dev/).\n\nWe apply the gradient to the interactive element with the fake border.\n\n```html\n<a\n  href=\"#\"\n  class=\"inline-block bg-white from-pink-500 via-red-500 to-yellow-500 p-0.5\"\n>\n  <span class=\"block px-5 py-3 text-white bg-slate-900\"> Get Started </span>\n</a>\n```\n\nYou might be concerned that the gradient classes added will override the `bg-white` but it won't, for that to happen we need to add the gradient direction class which is done on hover.\n\n### Applying the Hover Effect\n\nWe can take what we've done and add two more classes, one is a default Tailwind CSS class which is applied on hover, the other is always applied and needs some JIT magic.\n\n```html\n<a\n  href=\"#\"\n  class=\"inline-block bg-white from-pink-500 via-red-500 to-yellow-500 bg-[length:400%_400%] p-0.5 hover:bg-gradient-to-r\"\n>\n  <span class=\"block px-5 py-3 text-white bg-slate-900\"> Get Started </span>\n</a>\n```\n\nLet's break these down.\n\n`hover:bg-gradient-to-r`\n\nThis applies the gradient direction class only on hover which will make the gradient display instead of `bg-white`.\n\n`bg-[length:400%_400%]`\n\nThis makes the gradient huge allowing us to apply an animation to it, without this class the gradient will appear as is and wont animate.\n\n### Animating the Gradient\n\nNow it's time to animate.\n\nFirst, we need to make some additions to our Tailwind CSS config.\n\n```js\ntheme: {\n  extend: {\n    animation: {\n      border: 'border 4s ease infinite',\n    },\n    keyframes: {\n      border: {\n        '0%, 100%': { backgroundPosition: '0% 50%' },\n        '50%': { backgroundPosition: '100% 50%' },\n      },\n    },\n  },\n}\n```\n\nHere we're creating an animation with the class `animate-border` which is using the `border` object in the `keyframes` object. In short, this moves the gradient.\n\nFinally, we can add the `animate-border` class to the interactive element with the gradient classes.\n\nYou can use `hover:animate-border` if preferred, but note that will reset the animation when you are no longer on hover, which can cause it to look a little jumpy.\n\nThe full example looks like this.\n\n```html\n<a\n  href=\"#\"\n  class=\"animate-border inline-block bg-white from-pink-500 via-red-500 to-yellow-500 bg-[length:400%_400%] p-0.5 hover:bg-gradient-to-r\"\n>\n  <span class=\"block px-5 py-3 text-white bg-slate-900\"> Get Started </span>\n</a>\n```\n\nAnd here is the [full example](https://play.tailwindcss.com/YooA6NXDHi?layout=preview) (with some extra spice) on Tailwind Play.\n",
            "url": "https://www.hyperui.dev/blog/animated-border-gradient-with-tailwindcss",
            "title": "How to Create an Animated Border Gradient with Tailwind CSS",
            "summary": "How to create an animated border gradient with Tailwind CSS with no custom CSS.",
            "date_modified": "2022-09-29T23:00:00.000Z",
            "author": {
                "name": "Mark Mead",
                "url": "https://www.markmead.dev/"
            }
        },
        {
            "id": "custom-gradients-with-tailwindcss-jit",
            "content_html": "\n## What is JIT?\n\nSince v3, JIT has been the default in Tailwind CSS and has bought a lot of power to the framework. One of the best additions are [arbitrary values](https://tailwindcss.com/docs/adding-custom-styles#using-arbitrary-values), these allow you to replace custom CSS with Tailwind CSS like classes.\n\n### Without Tailwind CSS JIT\n\n```html\n<div class=\"absolute p-4 floating-alert\">Hello World! 👋</div>\n```\n\nAnd for the CSS...\n\n```css\n.floating-alert {\n  bottom: 5px;\n  right: 5px;\n}\n```\n\n### With Tailwind CSS JIT\n\n```html\n<div class=\"absolute bottom-[5px] right-[5px] p-4\">Hello World! 👋</div>\n```\n\nThe benefit here is keeping everything within the HTML, this means:\n\n- Less switching between files\n- No need to update Tailwind CSS config\n- Easily use Tailwind CSS breakpoints `top-[2px] sm:top-[3px] lg:top-[5px]`\n\n## Creating Gradients with Tailwind CSS JIT\n\nIf you are using these gradients more than once, it's worth adding them to the Tailwind CSS config.\n\nThe syntax for creating a gradient looks confusing, but it's easy to understand once you realise that spaces are replaced with underscores. Take the following example:\n\n```html\n<div class=\"bg-[linear-gradient(180deg,_#005BBB_49.9%,_#FFD500_50%)]\"></div>\n```\n\nIn CSS this would be:\n\n```css\nbackground-image: linear-gradient(180deg, #005bbb 49.9%, #ffd500 50%);\n```\n\nThe underscores after commas are personal choice, I leave them in for readability but you can remove them.\n\nHere's a [preview of the example](https://play.tailwindcss.com/0Q0oaPLA4I) created in Tailwind CSS play sandbox.\n\nLet's try something a little tougher.\n\n## Conic Gradients in Tailwind CSS with JIT\n\nFor this I've used [Hypercolor](https://hypercolor.dev) to find a `conic-gradient` for the example.\n\n![](/images/posts/conic-gradient-example.webp)\n\nHere's the code written to replicate the example:\n\n```html\n<div\n  class=\"bg-[conic-gradient(at_left_center,_#eab308,_#a855f7,_#3b82f6)]\"\n></div>\n```\n\nWhich results in the follow CSS:\n\n```css\nbackground-image: conic-gradient(at left center, #eab308, #a855f7, #3b82f6);\n```\n\n## Radial Gradients in Tailwind CSS with JIT\n\nOnce again I'm using [Hypercolor](https://hypercolor.dev) to find a `radial-gradient` for the example.\n\n![](/images/posts/radial-gradient-example.webp)\n\nHere's the code written to replicate the example:\n\n```html\n<div\n  class=\"bg-[radial-gradient(at_center_bottom,_#fde68a,_#7c3aed,_#0c4a6e)]\"\n></div>\n```\n\nWhich results in the follow CSS:\n\n```css\nbackground-image: radial-gradient(at center bottom, #fde68a, #7c3aed, #0c4a6e);\n```\n\nAnd that's all it takes to add custom gradients, even styles that don't exist in Tailwind CSS to Tailwind CSS with JIT. Checkout [Hypercolor](https://hypercolor.dev) for more gradients including; mesh gradients, grainy gradients and a gradient generator.\n",
            "url": "https://www.hyperui.dev/blog/custom-gradients-with-tailwindcss-jit",
            "title": "How to Create Custom Gradients in Tailwind CSS with JIT",
            "summary": "Tailwind CSS v3 meant JIT become the standard, learn how to use JIT to create custom gradients in Tailwind CSS without any custom CSS.",
            "date_modified": "2022-03-05T00:00:00.000Z",
            "author": {
                "name": "Mark Mead",
                "url": "https://www.markmead.dev/"
            }
        },
        {
            "id": "highlight-hover-effect-with-tailwindcss",
            "content_html": "\nOn the web you might come across a hover effect where the element you are hovering has full opacity and the sibling elements have a lower opacity. It could look something like this.\n\n![](/images/posts/highlight-hover-example.webp)\n\nAs you can see the second from the left item is at full opacity, while the others are faded.\n\n## How?... in Tailwind CSS\n\nThanks to the new hideous syntax where we can write stuff like `[&:hover>li]` we can get this working quite easily, without any custom CSS 🎉\n\nSo what do we need?\n\n1. Parent element that on hover lowers the opacity of child elements\n2. Child elements that on hover override their opacity\n\nHere's a simple version of that.\n\n```html\n<ul class=\"[&:hover>li]:opacity-50\">\n  <li class=\"hover:!opacity-100\">...</li>\n  <li class=\"hover:!opacity-100\">...</li>\n  <li class=\"hover:!opacity-100\">...</li>\n  <li class=\"hover:!opacity-100\">...</li>\n</li>\n```\n\nThere's not much happening here but let's break it down.\n\n**`[&:hover>li]:opacity-50]`**\n\nWhen the `ul` is on hover target the `li` elements and lower their opacity to `0.5`.\n\n**`hover:!opacity-100`**\n\nWhen the `li` element is on hover, force the opacity back to `1`. We force it with the `!` modifier which applies `!important`.\n\nThat's the base for any hover effect like this with Tailwind CSS, now we can take that logic and apply it to a built out design.\n\n[Highlight Hover Example](https://play.tailwindcss.com/rc93nyfqOu?layout=preview)\n\n---\n\nOne thing you'll notice, when hovering in the gaps between the `li` elements that one of them will be on hover, this is to ensure an element is highlighted when the cursor is within the `ul`.\n\nYou can get around this with JavaScript using something like the [Negative Hover](https://github.com/markmead/negative-hover) package that I wrote.\n",
            "url": "https://www.hyperui.dev/blog/highlight-hover-effect-with-tailwindcss",
            "title": "How to Create a Highlight Hover Effect with Tailwind CSS",
            "summary": "Create a hover effect where one element is highlighted and the sibling elements are faded in Tailwind CSS.",
            "date_modified": "2022-09-24T23:00:00.000Z",
            "author": {
                "name": "Mark Mead",
                "url": "https://www.markmead.dev/"
            }
        },
        {
            "id": "how-to-clean-up-tailwindcss-code",
            "content_html": "\nIt's no secret that Tailwind CSS can make your markup very messy, but we can take some steps to prevent this. Probably the most common is to delegate classes to the parent element.\n\nTake the following example.\n\n```html\n<ul>\n  <li class=\"text-sm font-medium text-gray-900\">...</li>\n  <li class=\"text-sm font-medium text-gray-900\">...</li>\n  <li class=\"text-sm font-medium text-gray-900 bg-gray-100\">...</li>\n</ul>\n```\n\nHere we have three repeating classes on the `<li>` elements.\n\n- `text-sm`\n- `font-medium`\n- `text-gray-900`\n\nThis can be helped by moving these classes to the parent `<ul>` element and have the CSS cascade down.\n\n```html\n<ul class=\"text-sm font-medium text-gray-900\">\n  <li>...</li>\n  <li>...</li>\n  <li class=\"bg-gray-100\">...</li>\n</ul>\n```\n\nBoom! HTML cleaned up.\n\nHowever, what if we are using classes that cannot be delegated to the parent?\n\nClasses such as `whitespace-nowrap`, `px-8`, `rotate-3` and many more, cannot be applied to child elements from the parent through cascading.\n\nHowever, there's a solution...\n\n## Enter Tailwind CSS JIT\n\nIf you're not too sure what JIT is then here's a brief description from my [How to Create Custom Gradients in Tailwind CSS with JIT](/blog/custom-gradients-with-tailwindcss-jit) blog.\n\n> Since v3, JIT has been the default in Tailwind CSS and has bought a lot of power to the framework. One of the best additions are [arbitrary values](https://tailwindcss.com/docs/adding-custom-styles#using-arbitrary-values), these allow you to replace custom CSS with Tailwind CSS like classes.\n\nLet's use this example.\n\n```html\n<ul>\n  <li class=\"p-4 text-sm font-medium whitespace-nowrap\">...</li>\n  <li class=\"p-4 text-sm font-medium whitespace-nowrap\">...</li>\n  <li class=\"p-4 text-sm font-medium bg-gray-100 whitespace-nowrap\">...</li>\n</ul>\n```\n\nHere we have four repeating classes.\n\n- `whitespace-nowrap`\n- `p-4`\n- `text-sm`\n- `font-medium`\n\nHowever, there are only two that can be delegated to the parent.\n\n- `text-sm`\n- `font-medium`\n\nHere's how it would look without JIT.\n\n```html\n<ul class=\"text-sm font-medium\">\n  <li class=\"p-4 whitespace-nowrap\">...</li>\n  <li class=\"p-4 whitespace-nowrap\">...</li>\n  <li class=\"p-4 bg-gray-100 whitespace-nowrap\">...</li>\n</ul>\n```\n\nAs you can see we still have `p-4` and `whitespace-nowrap` repeated on all the `<li>` elements.\n\n## Delegating Classes with JIT\n\nHere's how the example looks with JIT.\n\n```html\n<ul class=\"text-sm font-medium [&>*]:whitespace-nowrap [&>*]:p-4\">\n  <li>...</li>\n  <li>...</li>\n  <li class=\"bg-gray-100\">...</li>\n</ul>\n```\n\nThis might look like confusing but it's simple as `[&>*]` is just CSS.\n\nIt's the same as writing this.\n\n```css\n& > * {\n  //\n}\n```\n\nWhich translates to.\n\n> Select all first level children within this element\n\nIn our example the `&` is the `<ul>` and the `*` is the `<li>` elements.\n\nHere's how that would look in CSS.\n\n```css\nul > li {\n  //\n}\n```\n\nAnd from that all we're doing is applying CSS but with Tailwind CSS utilities.\n\n```css\nul {\n  font-size: 0.875rem; // text-sm\n  line-height: 1.25rem; // text-sm\n  font-weight: 500; // font-medium\n}\n\nul > li {\n  white-space: nowrap; // whitespace-nowrap\n  padding: 1rem; // p-4\n}\n```\n\nHere's a more [built-out example using a table component](https://play.tailwindcss.com/pJxSAPRw22) from HyperUI.\n\n---\n\nI'm on the fence about this approach, as arbitrary classes have some downsides.\n\n- Confusing to read\n- Confusing to write\n- Messy markup\n\n> This post is called \"One Simple Trick to Cleaning Up Tailwind CSS Code\" and yet a downside of arbitrary classes is \"messy markup\"\n\nIt's more of an opinion. I initially thought arbitrary classes looked messy, but when used correctly they can really help clean up your Tailwind CSS code.\n\nAnd of course, they're optional. There's no need/requirement to use them.\n",
            "url": "https://www.hyperui.dev/blog/how-to-clean-up-tailwindcss-code",
            "title": "One Simple Trick to Cleaning Up Tailwind CSS Code",
            "date_modified": "2022-10-09T23:00:00.000Z",
            "author": {
                "name": "Mark Mead",
                "url": "https://www.markmead.dev/"
            }
        },
        {
            "id": "how-to-contribute",
            "content_html": "\nFor some, the idea of contributing to an open source project can be very daunting but please don't let that put you off. Let's walk through how you can contribute to HyperUI and get some open source work on your CV/GitHub.\n\n## Spotted a Bug?\n\nIf you notice something that looks a little off:\n\n- Spelling\n- Accessibility\n- SEO\n\nPlus plenty more, then please do [create an issue](https://github.com/markmead/hyperui/issues/new/choose).\n\nOnce an issue has been created I can start working on a fix. However, if you'd like to work on the fix then let me know.\n\n## Want to Add Something?\n\nIf you have something that you want to add to HyperUI then that's awesome, but before you dive too deep into the development, I'd recommend that you [create an issue](https://github.com/markmead/hyperui/issues/new/choose) to outline what it is that you are adding.\n\nIf you plan to add a new component then please include some examples of what the component will look like.\n\n### Pull Request Feedback\n\nHere's the scary part 👻\n\nAll pull requests need to be reviewed before being merged into HyperUI, which does mean that on occasion there will be feedback. Please do not be disheartened by feedback, we're all developing each other's skill set and trying to make HyperUI (and other open source projects) better.\n\n### Getting HyperUI Running Locally\n\nHyperUI is a Next JS + Typescript project and can be set up quickly with the following commands.\n\n```shell\ngit clone git@github.com:markmead/hyperui.git\nyarn\nyarn dev\n```\n\nIf you are working on some changes that need to compile CSS, then you'll need to open a new terminal window and run the following.\n\n```shell\nyarn watch\n```\n\n### Creating a New Component\n\nFor this example, we will be adding a new footer component in the marketing category.\n\n1. Create a new file in `/public/components/marketing-footers`\n2. Add the new component to the components group in `/src/data/components/marketing-footers.mdx`\n\nIt should look like this.\n\n```shell\ncomponents:\n  21:\n    title: An Amazing Footer\n  22:\n    title: My Awesome New Footer ✨\n```\n\nAs you will see, component files are named incrementally, please follow this method.\n\nIf needed you can use `container: ...` to position the component within the preview, but note, that any classes added here will be ignored when copying or viewing the components code.\n\n#### Notes on New Components\n\n1. Components need to be written with Tailwind CSS\n2. Don't make changes to the `/public/tailwind.css`\n3. Reference used Tailwind CSS plugins in the HTML\n\nYou can see examples of point 3 in the HTML of this [input component](https://www.hyperui.dev/components/application-ui/pagination#component-3).\n\n### Creating a New Collection\n\nIf you want to create a new collection then please [create an issue](https://github.com/markmead/hyperui/issues/new/choose) on GitHub, then we can discuss the new collection and get some ideas for what components can be added.\n\n### New Component Feedback\n\nIf you are looking to add a component to HyperUI then I will give feedback on both the design and development of the component.\n\nFor new component pull requests, I will review the work three times. If on the third review there is feedback from the first review that is still not addressed, then I will close it and ask for it to be re-opened once feedback has been addressed.\n\nIf on the third review there is new feedback then that's not an issue, it's only if you have continued to ignore feedback from the first review.\n\nI believe this to be fair.\n\n## Final Notes\n\nContributing to open source is one of the best feelings for a developer, but as mentioned, it can be very daunting. I really don't want anyone to feel that way with HyperUI, so please do get involved, and let's all push HyperUI to become a better project.\n",
            "url": "https://www.hyperui.dev/blog/how-to-contribute",
            "title": "How to Contribute to HyperUI",
            "summary": "It can be daunting contributing to an open source project, find out how you can get involved with the development of HyperUI.",
            "date_modified": "2022-07-24T23:00:00.000Z",
            "author": {
                "name": "Mark Mead",
                "url": "https://www.markmead.dev/"
            }
        },
        {
            "id": "how-to-write-better-containers-in-tailwindcss",
            "content_html": "\nThroughout HyperUI you will see the classes `max-w-screen-xl mx-auto px-4` used to contain content, this can be seen on the website and the components.\n\nSome of you may be wondering...\n\n> Why not use the `.container` class?\n\nGreat question.\n\nLet's look at the `.container` class [documentation](https://tailwindcss.com/docs/container) on the Tailwind CSS website.\n\nAs we can see it provides `max-width` sizes at different breakpoints, which results in the content within the container snapping to that size as the breakpoint is reached.\n\n[Container Example](https://play.tailwindcss.com/b5FKBhVHw7?layout=preview&size=1866x900)\n\nIf you shrink/expand the preview you will see the content within the container snapping.\n\n## A More Fluid Container\n\nHere's the same preview but using the classes I mentioned at the start of this blog post.\n\n[Fluid Example](https://play.tailwindcss.com/vwHBxhrJMC?layout=preview&size=1866x900)\n\nAs you can see it's more fluid, you reach the breakpoint where `max-w-screen-xl` is no longer applied and then the padding is used to contain the content. If you wanted a fully fluid container you can remove the `max-w-screen-xl` class.\n\nLet's compare the two.\n\n[Container vs Fluid Example](https://play.tailwindcss.com/A7HdMDPg0O?layout=preview&size=1866x900)\n\nAn argument for the `.container` approach is that the content is wider on larger screens, but to solve that you can use `max-w-screen-2xl` instead of `max-w-screen-xl`.\n\n## Edit the Config and Write Less Code\n\nOne final note, if you are using the `.container` approach and find yourself writing `container mx-auto` a lot, then you can do the following.\n\n```js\ntheme: {\n  container: {\n    center: true,\n\n    // Optional\n    padding: {\n      DEFAULT: '1rem',\n      sm: '1.5rem',\n      lg: '2rem'\n    }\n  },\n}\n```\n\n---\n\nFun fact, I wrote a blog post in 2021 arguing the `.container` approach over using `max-w-screen-xl`, you can still read that.\n\n[How to Write Better Tailwind CSS Containers - 2021](https://v1.markmead.dev/blogs/how-to-write-better-tailwindcss-containers)\n",
            "url": "https://www.hyperui.dev/blog/how-to-write-better-containers-in-tailwindcss",
            "title": "How to Write Better Containers in Tailwind CSS",
            "summary": "Find out how to write better Tailwind CSS containers and make your website feel more fluid as you change breakpoints.",
            "date_modified": "2022-09-19T23:00:00.000Z",
            "author": {
                "name": "Mark Mead",
                "url": "https://www.markmead.dev/"
            }
        },
        {
            "id": "how-to-write-better-tailwindcss",
            "content_html": "\nWriting Tailwind CSS? Here are some tips and tricks that I apply when using Tailwind CSS to make my code look and perform better.\n\nGot some tips to add to add? [Create a PR on GitHub](https://github.com/markmead/hyperui).\n\n## Delegate Classes to Parent Element\n\n### Incorrect\n\n```html\n<ul>\n  <li class=\"text-sm font-medium whitespace-nowrap\">First</li>\n  <li class=\"text-sm font-medium whitespace-nowrap\">Second</li>\n  <li class=\"text-sm font-medium whitespace-nowrap\">Third</li>\n</ul>\n```\n\n### Correct\n\n```html\n<ul class=\"text-sm font-medium\">\n  <li class=\"whitespace-nowrap\">First</li>\n  <li class=\"whitespace-nowrap\">Second</li>\n  <li class=\"whitespace-nowrap\">Third</li>\n</ul>\n```\n\n---\n\n## Remove Flex Classes on Mobile\n\n### Incorrect\n\n```html\n<div class=\"flex flex-col sm:flex-row sm:items-center sm:justify-between\">\n  <div>Hello</div>\n  <div>World</div>\n</div>\n```\n\n### Correct\n\n```html\n<div class=\"sm:flex sm:items-center sm:justify-between\">\n  <div>Hello</div>\n  <div>World</div>\n</div>\n```\n\n---\n\n## Evenly Space Content with Flow Root\n\n### Incorrect\n\n```html\n<ul class=\"space-y-8 divide-y\">\n  <li>First</li>\n  <li class=\"pt-8\">Second</li>\n  <li class=\"pt-8\">Third</li>\n</ul>\n```\n\n### Correct\n\n```html\n<div class=\"flow-root\">\n  <ul class=\"-my-8 divide-y\">\n    <li class=\"py-8\">First</li>\n    <li class=\"py-8\">Second</li>\n    <li class=\"py-8\">Third</li>\n  </ul>\n</div>\n```\n\n> But this is more code\n\nTrue, however...\n\n- Which one will make more sense in a few months time?\n- How would the first example work with dynamic content?\n\n---\n\n## Avoid Margin Bottom for Spacing Content\n\n### Incorrect\n\n```html\n<div>\n  <div class=\"mb-4\">Hello</div>\n  <div>World</div>\n</div>\n```\n\n### Correct\n\n```html\n<div>\n  <div>Hello</div>\n  <div class=\"mt-4\">World</div>\n</div>\n```\n\n> What is the benefit, they do the same thing?\n\nSure, but what if the content is dynamic and there's no second element? You'll end up with extra space below the first element.\n\n---\n\n## Remove Duplicate Spacing Classes with Parent Classes\n\n### Incorrect\n\n```html\n<ul>\n  <li>First</li>\n  <li class=\"mt-8\">Second</li>\n  <li class=\"mt-8\">Third</li>\n</ul>\n```\n\n### Correct\n\n```html\n<ul class=\"space-y-8\">\n  <li>First</li>\n  <li>Second</li>\n  <li>Third</li>\n</ul>\n```\n\n---\n\n## Use the Accurate Transition Class\n\n### Incorrect\n\n```html\n<button class=\"transition-all bg-red-500 hover:bg-red-600\">Click</button>\n```\n\n### Correct\n\n```html\n<button class=\"transition-colors bg-red-500 hover:bg-red-600\">Click</button>\n```\n\n> But the class name is longer?\n\nCan't argue with that, but do you need `transition-all`? Probably not.\n\n**If you want to save on class name length then use `transition` it will cover\n99% of the transition effects you need.**\n\n---\n\n## Use Color Opacity Classes\n\n### Incorrect\n\n```html\n<button class=\"relative\">\n  <span class=\"absolute inset-0 bg-red-500 opacity-50\"></span>\n  Click\n</button>\n```\n\n### Correct\n\n```html\n<button class=\"bg-red-500 bg-opacity-50\">Click</button>\n<!-- With JIT -->\n<button class=\"bg-red-500/50\">Click</button>\n```\n\n---\n\n## Split CSS Class Names onto Multiple Lines in CSS Files\n\n### Incorrect\n\n```css\n.button {\n  @apply inline-flex items-center rounded border px-5 py-3 text-sm transition hover:scale-105;\n}\n```\n\n### Correct\n\n```css\n.button {\n  @apply inline-flex items-center; // Layout\n  @apply px-5 py-3 text-sm; // Spacing/Sizing\n  @apply rounded border; // Style\n  @apply transition; // Transition\n  @apply hover:scale-105; // Interaction\n}\n```\n\n> How is this better? It's more code...\n\nCorrect, but it's easier to read and it all gets compiled down.\n\n---\n\n## Avoid Creating Components in CSS Files\n\n**Only applies if you are using a templating language that allows for\ncomponents, such as Blade, React, Liquid OR Vue.**\n\n### Incorrect\n\n```html\n<div class=\"card\">\n  <div class=\"card-title\">Title</div>\n  <div class=\"card-body\">Title</div>\n  <div class=\"card-footer\">\n    <div class=\"card-timestamp\">15/05/2025</div>\n\n    <div class=\"card-actions\">\n      <button>Edit</button>\n      <button>Delete</button>\n    </div>\n  </div>\n</div>\n```\n\nAnd for the CSS...\n\n```css\n  .card {\n    @apply p-4 rounded;\n  }\n\n  .card-title {\n    @apply text-lg;\n  }\n\n  .card-body {\n    @apply mt-1;\n  }\n\n  .card-footer {\n    @apply flex items-center justify-between;\n  }\n\n  .card-timestamp {\n    @apply text-sm;\n  }\n\n  .card-actions {\n    @apply flex gap-4;\n  }\n</style>\n```\n\n### Correct\n\n```html\n<div class=\"p-4 rounded\">\n  <div class=\"text-lg\">Title</div>\n  <div class=\"mt-1\">Title</div>\n  <div class=\"flex items-center justify-between\">\n    <div class=\"text-sm\">15/05/2025</div>\n\n    <div class=\"flex gap-4\">\n      <button>Edit</button>\n      <button>Delete</button>\n    </div>\n  </div>\n</div>\n```\n\n---\n\n## Use Max Width Classes When Restricting Width\n\n### Incorrect\n\n```html\n<div class=\"w-auto sm:w-64\">\n  <div>Hello World</div>\n</div>\n```\n\n### Correct\n\n```html\n<div class=\"max-w-sm\">\n  <div>Hello World</div>\n</div>\n```\n\n> What's the benefit?\n\nThere's a few:\n\n- They are responsive by default\n- They better describe the layout\n\n---\n\n## Group Prefixed Class Names\n\n### Incorrect\n\n```html\n<div class=\"\\mt-4 lg:text-3xl\\ text-lg sm:mt-0 sm:text-xl\">Hello World</div>\n```\n\n_Excuse the `\\...\\` it's to stop Headwind from formatting._\n\n### Correct\n\n```html\n<div class=\"mt-4 text-lg sm:mt-0 sm:text-xl lg:text-3xl\">Hello World</div>\n```\n\nYou can use something like [Headwind](https://github.com/heybourn/headwind) to do this for you.\n\n---\n\n## Be Specific with Breakpoint Classes\n\n### Incorrect\n\n```html\n<div class=\"items-center justify-between sm:flex\">\n  <div>Hello</div>\n  <div>World</div>\n</div>\n```\n\n### Correct\n\n```html\n<div class=\"sm:flex sm:items-center sm:justify-between\">\n  <div>Hello</div>\n  <div>World</div>\n</div>\n```\n\n> What's the issue here?\n\nYou are loading extra CSS on mobile that isn't being used. This might not seem drastic in this example but imagine the\nwhole frontend is written like the first example... That's a lot of extra CSS being loaded on mobile.\n\n---\n\n## Use Headwind and Tailwind CSS Intellisense\n\n### Headwind\n\n[Headwind GitHub Repo](https://github.com/heybourn/headwind)\n\n- Sort Tailwind CSS class names\n- Remove duplicate class names\n- Move custom class names to end of class name list\n\n### Tailwind CSS Intellisense\n\n[Tailwind CSS Intellisense GitHub Repo](https://github.com/tailwindlabs/tailwindcss-intellisense)\n\n- Autocomplete Tailwind CSS class names (includes classes added in the Tailwind CSS config)\n- Highlights errors with Tailwind CSS class names\n- Displays the CSS generated with each Tailwind CSS class\n",
            "url": "https://www.hyperui.dev/blog/how-to-write-better-tailwindcss",
            "title": "Tips & Tricks for Writing Better Tailwind CSS",
            "summary": "I've been writing Tailwind CSS for since 2018 and have come across a few tips and tricks to make your code look and perform better.",
            "date_modified": "2022-04-14T23:00:00.000Z",
            "author": {
                "name": "Mark Mead",
                "url": "https://www.markmead.dev/"
            }
        },
        {
            "id": "move-to-tailwindcss-without-breaking-changes",
            "content_html": "\nI've heard the line...\n\n> I'm moving to Tailwind CSS but it's been difficult as it breaks Bootstrap\n\nAt least three times, which is not a lot, but when the solution is a single line of code, it feels like a lot.\n\nBut what is the mighty line? You ask.\n\n```js\nprefix: 'tw-'\n```\n\nThat's it.\n\nNow classes like `flex` will be `tw-flex` and if you don't like `tw-` then don't use it. You can set the prefix to anything you want, even `ow2-is-a-cash-grab-` 🤷‍♂️\n\n---\n\nSometimes you will still face issues, this is most likely due to the Tailwind CSS and Bootstrap normalize CSS conflicting. You can solve this by disabling one.\n\nI usually disable the Tailwind CSS normalize as I want to keep the styles as close to the Bootstrap implementation while moving over.\n\n_I know that's a little backwards, but you have to keep the clients happy!_\n\nIt's as easy as a comment to disable the Tailwind CSS normalize.\n\n```css\n/* @tailwind base; */\n@tailwind components;\n@tailwind utilities;\n```\n\nYou can [read more about prefix](https://tailwindcss.com/docs/configuration#prefix) on the Tailwind CSS website.\n",
            "url": "https://www.hyperui.dev/blog/move-to-tailwindcss-without-breaking-changes",
            "title": "Moving to Tailwind CSS from Bootstrap? Use a Prefix",
            "summary": "Having issues when moving your existing Bootstrap project to Tailwind CSS? There might be an easy solution for that.",
            "date_modified": "2022-10-24T23:00:00.000Z",
            "author": {
                "name": "Mark Mead",
                "url": "https://www.markmead.dev/"
            }
        },
        {
            "id": "hyperui-rewrite-whats-changed",
            "content_html": "\n## Why Rewrite?\n\nI've known I wanted to rewrite HyperUI for a few months now, however, I wanted the rewrite to have meaning and to provide a benefit to myself and contributors.\n\nI believe, that as developers we fall into the trap of constantly rewriting what we've done. As an example of that, I've had three different personal websites in a year which all do the same thing and if anything, the latest version does less than the first version.\n\nHowever, that no longer applies as I want changes to have meaning and progress the projects (in this case HyperUI) forward.\n\nSo, what was the reason behind the HyperUI rewrite...\n\n> HyperUI is a mixture of React and Typescript code that comes from other projects, code that I've written to match the structure of the code from the other projects and code that I've written how I'd like it to be written but with adjustments so it matches the rest of the project.\n\n_The other projects referenced come from [https://nextjs.org/examples](https://nextjs.org/examples)._\n\nIn short, the React and Typescript code of HyperUI didn't feel like it was mine.\n\nHere's how I changed that... 🥁\n\n### Added\n\n- Added the [fast-glob](https://github.com/mrmlnc/fast-glob) package to slim down the `tailwind.config.js`\n- Added a `src` folder to hold the React code that powers the site\n- Added a `_document.tsx` file to control the HTML including the `lang` attribute\n- Added the [tailwind-prettier-plugin](https://github.com/tailwindlabs/prettier-plugin-tailwindcss) as not everyone uses [headwind](https://github.com/heybourn/headwind)\n- Added a \"Skip to main content\" button for those using keyboard navigation\n- Added more type checking through Typescript `type` and `interface` objects\n- Added scroll restoration through the `next.config.js` (experimental feature)\n- Added social links to the site footer\n\n### Updated\n\n- Formatted all files with the [tailwind-prettier-plugin](https://github.com/tailwindlabs/prettier-plugin-tailwindcss)\n- Swapped to the [SWC](https://swc.rs/) compiler for JavaScript\n- Improved the names of functions, components and variables to be more declarative\n\n```js\n// Before\nconst [code, setCode] = useState<string>()\nconst [html, setHtml] = useState<string>()\nconst [view, setView] = useState<boolean>(true)\nconst [width, setWidth] = useState<string>('100%')\nconst [variant, setVariant] = useState<string>('base')\nconst [themed, setThemed] = useState<boolean>(false)\nconst [dark, setDark] = useState<boolean>(false)\nconst [loading, setLoading] = useState<boolean>(false)\n\n// After\nconst [componentCode, setComponentCode] = useState<string>()\nconst [componentHtml, setComponentHtml] = useState<string>()\nconst [showPreview, setShowPreview] = useState<boolean>(true)\nconst [previewWidth, setPreviewWidth] = useState<string>('100%')\nconst [selectedVariant, setSelectedVariant] = useState<string>('base')\nconst [hasDarkMode, setHasDarkMode] = useState<boolean>(false)\nconst [isDarkMode, setIsDarkMode] = useState<boolean>(false)\nconst [isLoading, setIsLoading] = useState<boolean>(false)\n```\n\n- Cleaned up the site header to be less cluttered on desktop and mobile\n- Switched to a more familiar syntax for React components\n\n```js\ntype Props = {\n  hasDarkMode: boolean\n  isDarkMode: boolean\n  handleSetIsDarkMode: CallableFunction\n}\n\n// Before\nconst Dark: FunctionComponent<Props> = ({\n  hasDarkMode,\n  isDarkMode,\n  handleSetIsDarkMode,\n}) => {}\n\n// After\nfunction Dark({ hasDarkMode, isDarkMode, handleSetIsDarkMode }: Props) {}\n```\n\n- Swapped the name of `{global,build}.css` files to `tailwind.css`\n- Included the `tailwind.css` build file to `.gitignore`\n- Renamed the sitemap config to be more inline with other configs\n- Cleaned up the [How to Contribute](https://www.hyperui.dev/blog/how-to-contribute) blog following changes\n- Improved the Typescript `type` and `interface` objects\n- Improve the `lib` functions that are used for data fetching\n- Fixed an issue with dark mode not applying when switching preview mode\n- Cleaned up the React code for the preview component\n\n### Removed\n\n- Remove old code that was no longer use before or after the update\n- Removed options from `tsconfig.json` that were relaxing the rules\n- Removed the `layout.tsx` component\n- Remove unused `interface` objects that were underused\n- Removed unnecessary information from the README\n- Removed the breakpoint slider component `range.tsx`\n- Removed the local declaration from the `next.config.js`\n\n---\n\nYup... There were a lot of changes, I believe 440+ files, but that does include the Tailwind CSS components.\n\nIt's worth noting that pull requests and commit messages are now adopting a more descriptive approach as well, for example.\n\n```shell\n// Before\nfeat/error-page-components\n\n// After\nFeature - Added new error page components\n```\n\nYou can see the [full pull request](https://github.com/markmead/hyperui/pull/173) on GitHub.\n\nOverall, I've been enjoying working with React and Typescript a lot more on HyperUI and this rewrite helped fix a few issues and make some improvements to the site.\n",
            "url": "https://www.hyperui.dev/blog/hyperui-rewrite-whats-changed",
            "title": "HyperUI Rewritten... What's Changed?",
            "summary": "Another huge update lands in HyperUI, this time a complete rewrite of the React code base making it faster and easier to develop in.",
            "date_modified": "2022-10-04T23:00:00.000Z",
            "author": {
                "name": "Mark Mead",
                "url": "https://www.markmead.dev/"
            }
        },
        {
            "id": "remove-number-input-spinners-with-tailwindcss",
            "content_html": "\nIt's not required, but I'd recommend using [@tailwindcss/forms](https://github.com/tailwindlabs/tailwindcss-forms) when working with inputs, it comes with some great defaults and speeds up the styling process.\n\n---\n\nIf you ever find yourself working with a number input and thinking...\n\n> Ah! I wish those stupid spinners would go away!\n\nThen you are not alone.\n\nThey definitely have their use, but they can become a problem. Let's get rid of them.\n\n## CSS Class (Level 1)\n\nThe solution that does not care what CSS framework you are using.\n\n```css\n.no-spinner {\n  -moz-appearance: textfield;\n}\n\n.no-spinner::-webkit-outer-spin-button,\n.no-spinner::-webkit-inner-spin-button {\n  margin: 0;\n  -webkit-appearance: none;\n}\n```\n\nNow you can add the `no-spinner` class to your number inputs to remove the spinners.\n\n## Tailwind CSS Class (Level 2)\n\n```css\n@layer components {\n  .no-spinner {\n    -moz-appearance: textfield;\n  }\n\n  .no-spinner::-webkit-outer-spin-button,\n  .no-spinner::-webkit-inner-spin-button {\n    margin: 0;\n    -webkit-appearance: none;\n  }\n}\n```\n\nThis \"Tailwind-ifys\" the solution and makes the `no-spinner` class part of Tailwind CSS.\n\nWhich means it will now appear as a suggested class when using [Tailwind CSS Intellisense](https://tailwindcss.com/docs/editor-setup#intelli-sense-for-vs-code).\n\n## Tailwind CSS Class Names (Level 3)\n\nBrace yourself.\n\n```html\n<input\n  type=\"number\"\n  class=\"[-moz-appearance:_textfield] [&::-webkit-outer-spin-button]:m-0 [&::-webkit-outer-spin-button]:appearance-none [&::-webkit-inner-spin-button]:m-0 [&::-webkit-inner-spin-button]:appearance-none\"\n/>\n```\n\nYou can see this approach in action on this [quantity input component](/components/ecommerce/quantity-inputs#component-2), but don't worry, I include the CSS snippet as well.\n\n---\n\nHere is a [example of the Tailwind CSS approaches](https://play.tailwindcss.com/NfSHSIY4fX).\n",
            "url": "https://www.hyperui.dev/blog/remove-number-input-spinners-with-tailwindcss",
            "title": "How to Remove Spinners on Number Input with Tailwind CSS (3 Levels)",
            "summary": "How to remove the spinners that appear on number inputs with Tailwind CSS.",
            "date_modified": "2022-12-05T00:00:00.000Z",
            "author": {
                "name": "Mark Mead",
                "url": "https://www.markmead.dev/"
            }
        },
        {
            "id": "text-shadow-with-tailwindcss",
            "content_html": "\nIt's worth noting that if you don't want to update the Tailwind CSS config, then you can use JIT to write the following.\n\n```html\n<h1 class=\"[text-shadow:_0_1px_0_rgb(0_0_0_/_40%)]\">Hello</h1>\n```\n\nAnd if you still want to be able to use classes such as `shadow-red-500` you can do this.\n\n```html\n<h1 class=\"[text-shadow:_0_1px_0_var(--tw-shadow-color)]\">Hello</h1>\n```\n\n## Why No Support? 🤷‍♂️\n\nAt the moment, there is no official support for `text-shadow` classes in Tailwind CSS and in fact, in a recent tweet Adam Wathan, the creator of Tailwind CSS said this:\n\n> What CSS feature that Tailwind doesn't have baked in do you find yourself getting the most irrationally angry about? Need ideas for v3.1 😅\n\n> In before `text-shadow` — harder than it sounds, one day, I'm sorry 👀\n\nThe reason for this is justified, it's not the implementation that's difficult (as you will see), it's the execution.\n\n> The hard part is choosing the default shadows to include. I've spent probably 20 hours on the problem so far and still haven't come up with a good way to approach it. What are all the problems they solve, how many sizes do we need, do they need to support colors, etc.\n\nWhat to do while we wait? Easy. We'll do it ourselves.\n\n## Adding Text Shadow Classes to Tailwind CSS\n\nIn your `tailwind.config.js` add the following:\n\n```js\nconst plugin = require('tailwindcss/plugin')\n\nmodule.exports = {\n  theme: {\n    extend: {\n      textShadow: {\n        sm: '0 1px 2px var(--tw-shadow-color)',\n        DEFAULT: '0 2px 4px var(--tw-shadow-color)',\n        lg: '0 8px 16px var(--tw-shadow-color)',\n      },\n    },\n  },\n  plugins: [\n    plugin(function ({ matchUtilities, theme }) {\n      matchUtilities(\n        {\n          'text-shadow': (value) => ({\n            textShadow: value,\n          }),\n        },\n        { values: theme('textShadow') }\n      )\n    }),\n  ],\n}\n```\n\nAnd that's it.\n\nWe can now write `text-shadow shadow-red-500` and have a beautiful red text shadow appear, fully created with Tailwind CSS and zero custom CSS.\n\nAll I did was follow the [adding plugins documentation](https://tailwindcss.com/docs/plugins#adding-utilities) and it worked.\n\nOur code added the following Tailwind CSS classes:\n\n- `text-shadow`\n- `text-shadow-sm`\n- `text-shadow-lg`\n\nBut you can add as many as you like.\n\nThe classes that have been added will appear in [Tailwind CSS IntelliSense](https://tailwindcss.com/docs/editor-setup#intelli-sense-for-vs-code) when writing something like `text-sh` for example.\n\nIt's worth noting the use of `var(--tw-shadow-color)`. This is important as it allows us to use Tailwind CSS `shadow-[color]` classes with the `text-shadow` classes we've added.\n\nSomething else to note is we can use arbitrary values such as; `text-shadow-[0_4px_8px_#6366f1]` to create text shadows.\n\nWant to see more? You can view the [full example](https://play.tailwindcss.com/wJi9jhaOyb) on the Tailwind CSS play sandbox.\n",
            "url": "https://www.hyperui.dev/blog/text-shadow-with-tailwindcss",
            "title": "How to Add Text Shadow Support to Tailwind CSS",
            "summary": "Currently there is no support for text shadows in Tailwind CSS, even though it's one of the most requested features. Find out how to add it yourself.",
            "date_modified": "2022-03-25T00:00:00.000Z",
            "author": {
                "name": "Mark Mead",
                "url": "https://www.markmead.dev/"
            }
        },
        {
            "id": "whats-new-in-hyperui",
            "content_html": "\n## What is HyperUI?\n\nHyperUI is a collection of free Tailwind CSS components that are open source.\n\n## HyperUI v2\n\nThe new version of HyperUI loads faster, is friendlier for developers that want to contribute and now has a great base to build from in 2022.\n\n### File Management\n\n#### Goodbye JavaScript\n\nIt's worth understanding how HyperUI created pages such as `/components/footers` before the update. This was managed through JavaScript arrays and helper functions that I'd use with `getStaticProps`. Here is how that looked:\n\n```js\nexport async function getStaticProps({ params: { id } }: Params) {\n  const collection = currentCollection(id)\n  const components = currentCollectionComponents(id)\n\n  return {\n    props: {\n      collection,\n      components,\n    },\n  }\n}\n```\n\nYou can view how this code works in [/lib/collections.ts](https://github.com/markmead/hyperui/blob/464b9670faeb7aa0d4bba79e39a1cc3a6a70cdb8/lib/collections.ts).\n\nThis is taking in the `id` from the URL, for example `footers` and finding the `footers` object in the collections array, it then gets the collection data and components which are then used for rendering.\n\nThis works fine but if I wanted to add specific content to `/components/footers` I'd need to update multiple files. Therefore, this is not friendly for contributors and has a massive drawback in that you can't update collections individually.\n\nHere is a preview of how the collections and components array would look:\n\n**Collections**\n\n```js\nconst collections = [\n  {\n    name: 'Alerts',\n    id: 'alerts',\n    emoji: '🚨',\n    container: 'max-w-sm mx-auto p-8',\n    count: alertComponents.length,\n    components: alertComponents,\n  },\n  // ...\n]\n```\n\n[View the /lib/collection.ts file](https://github.com/markmead/hyperui/blob/464b9670faeb7aa0d4bba79e39a1cc3a6a70cdb8/lib/collections.ts).\n\n**Alerts Component**\n\n```js\nconst alerts = [\n  { id: 1, title: 'Simple' },\n  { id: 2, title: 'With Description' },\n  { id: 3, title: 'With List' },\n  { id: 4, title: 'With Close' },\n  { id: 5, title: 'With Accent' },\n  { id: 6, title: 'With Icon, Content and Close' },\n  { id: 7, title: 'Dark with Icon' },\n]\n```\n\n[View the /lib/components.ts file](https://github.com/markmead/hyperui/blob/464b9670faeb7aa0d4bba79e39a1cc3a6a70cdb8/lib/components.ts).\n\n#### Hello Markdown\n\nI knew I wanted to use markdown and specifically MDX after using [next-mdx-remote](https://github.com/hashicorp/next-mdx-remote) on the [HyperJS website](https://www.hyperjs.dev/).\n\nThe rebuild needed to replicate what was currently working on HyperUI, therefore the checklist would be:\n\n- Manage Collection\n- Manage Components\n- Collection Spacing\n- Component Spacing\n\nAnd the new features I wanted are:\n\n- Manage SEO Content\n- Isolated Content\n\nIf you take a look at the [data/components folder](https://github.com/markmead/hyperui/tree/main/data/components) you will notice each collection has their own MDX file. This instantly ticks \"Isolated Content\" off the checklist.\n\nThe rest of the checklist can be handled with frontmatter. If you're not sure what frontmatter is, it's key/value pairs within a YAML block. As HyperUI used JavaScript objects for collections, all of the data was in key/value pairs already.\n\nHere's how the MDX file looked with the collection, components and SEO data:\n\n```shell\n---\ntitle: Announcements\nemoji: 📣\ncontainer: flex flex-col gap-4\nseo:\n  title: Announcement Components\n  description: Announcement components created with Tailwind CSS\ncomponents:\n  1:\n    title: Simple\n  2:\n    title: With Icon\n  3:\n    title: Floating with Close\n    container: relative\n  4:\n    title: With Slider\n---\n\n# Announcement Components\n\n<List componentsData={componentsArray} componentContainer={componentContainer} />\n```\n\nThis has now ticked everything off the checklist as it's taken the old collection object writing JavaScript and converted it to frontmatter.\n\n### Collection Content\n\nThanks to the `.prose` class from Tailwind CSS, the process of adding content has been streamlined. The days of adding content to JavaScript files and conditionally rendering the content are in the past, now all I have to do is write markdown.\n\n### Speed, Speed and Speed\n\nIt's no secret to me that HyperUI needed a performance rework and in HyperUI v2 I'm pleased to say there has been some massive improvements.\n\nAll of these changes has seen results of HyperUI loading **5-8x faster** and now has **100/100** Lighthouse scores across the board.\n\n#### Component Loading\n\nFor reference, HyperUI loads components by using `fetch` to grab the HTML from `/components/[collection]/[id].html` and then render the response in an `<iframe>`.\n\nFor example, if you went to `/components/alerts` HyperUI would do the following:\n\n```js\nfetch('/components/alerts/1.html')\nfetch('/components/alerts/2.html')\n// ...\nfetch('/components/alerts/7.html')\n```\n\nAnd this would all happen on page load. Not great, right? Especially when you consider some collections have 10+ components.\n\nFixing this was something I've tried in the past but for some reason I could not get `intersectionObserver` to play nice. Enter [react-intersection-observer](https://github.com/thebuilder/react-intersection-observer).\n\nHow does it work now?\n\nYou land on `/components/alerts` and the first component loads `fetch('/components/alerts/1.html')`. Start scrolling and as components enter the viewport another `fetch` is fired off for that component.\n\nWhen I saw this working I was beyond thrilled! I ran a test and pages were loading 5-8x faster. It's a testament to [react-intersection-observer](https://github.com/thebuilder/react-intersection-observer) that it worked this well out of the box, I only changed one setting and that was to stop `fetch` being re-called when scrolling back up.\n\n#### Less Renders\n\nIf you're wondering how HyperUI passes the CSS to these components it's quite simple.\n\nWhen the component HTML is fetched it adds in:\n\n```html\n<head>\n  <link rel=\"stylesheet\" href=\"/tailwind.css\" />\n</head>\n```\n\nCurrently, `/tailwind.css` is a tiny file and doesn't have too much of an impact on the performance. However, one thing I noticed was `/tailwind.css` being loaded in each time you toggled back to the preview of the component from the source code.\n\nThis was happening because the component was being re-rendered as it was wrapped in:\n\n```shell\n{view ? <Preview /> : <Code />}\n```\n\nI've changed this now to use CSS class names to toggle between the preview and the source code, this results in `/tailwind.css` not being re-loaded.\n\n#### Bug Fixes\n\nDuring the rebuild I noticed that components were loaded multiple times.\n\nFor example, `/components/alerts` has 7 components but there were times that 14/21 requests were sent. This was an issue for speed and one that I'm surprised didn't show up earlier, although it might have been created in the rebuild process.\n\nThis was fixed by adding `[id]` to the `useEffect` hook that was fetching the component data. Small change, but has resulted in a big improvement.\n\n#### Limit Passed Data\n\nAs I was updating HyperUI I noticed there was a few cases of unnecessary data being passed via props. The biggest culprit was the collection cards.\n\nIn the past these would received the entire collection object as a prop, however, with the new update to HyperUI you specify what attributes you want back and only they will be returned, therefore limiting the data that is passed around.\n\nCurrently that filtering is an optional parameter on the helper function, in the future I'll be making it required.\n\n### UI Updates\n\nYou'll notice a few changes to the UI, these are quite minimal:\n\n- Loading Indicator for Components\n- Improved Collection Page\n- Improved Mobile Menu\n- New Component Card\n- Removed Search (will return with a better UI)\n- Removed Favourites (wasn't used)\n- Removed Breadcrumb\n\n### General Updates\n\nThere were a few updates that happened during the build that weren't related to the build:\n\n- Improve Typescript Checking\n  - More Interfaces\n  - More Type Checks\n- Improve SEO\n- Removed Unused Packages\n\nAnd that's all I can remember. There was so much to this update and it's given HyperUI a fantastic base to build on for 2022. I've already added a few components to HyperUI after the rebuild went live and I can confirm the process has improved greatly.\n\nI can't wait to see how far HyperUI can go in 2022.\n",
            "url": "https://www.hyperui.dev/blog/whats-new-in-hyperui",
            "title": "What's New in HyperUI? Biggest Update Yet!",
            "summary": "Find out what's new in HyperUI as the project goes through its biggest update to date, featuring an easier process for contributors.",
            "date_modified": "2022-03-10T00:00:00.000Z",
            "author": {
                "name": "Mark Mead",
                "url": "https://www.markmead.dev/"
            }
        }
    ]
}