---
interface Props {
  src: string
}

const { src } = Astro.props
---

<preview-copy data-src={src} class="hidden md:block">
  <button
    type="button"
    aria-label="Copy HTML"
    aria-pressed="false"
    class="inline-flex items-center gap-2 rounded-lg border border-stone-300 px-4 py-2 font-medium shadow-sm focus:ring-2 focus:ring-pink-500 focus:outline-0"
  >
    <span data-emoji aria-hidden="true">ðŸ“‹</span>
    <span data-text>Copy</span>
  </button>

  <span data-polite aria-live="polite" class="sr-only"> </span>
</preview-copy>

<script>
  class PreviewCopy extends HTMLElement {
    connectedCallback() {
      const button = this.querySelector('button') as HTMLButtonElement
      const emoji = button.querySelector('span[data-emoji]') as HTMLSpanElement
      const text = button.querySelector('span[data-text]') as HTMLSpanElement
      const polite = this.querySelector('span[data-polite]') as HTMLSpanElement

      button.addEventListener('click', () => {
        let copied = button.getAttribute('aria-pressed') === 'true'

        button.setAttribute('aria-pressed', copied ? 'false' : 'true')

        copied = !copied

        emoji.textContent = copied ? 'âœ…' : 'ðŸ“‹'
        text.textContent = copied ? 'Copied' : 'Copy'

        polite.textContent = copied ? 'Copied to clipboard.' : ''

        document.dispatchEvent(
          new CustomEvent(`preview:copy:${this.dataset.src}`, {
            bubbles: true,
          })
        )

        setTimeout(() => {
          emoji.textContent = 'ðŸ“‹'
          text.textContent = 'Copy'
          polite.textContent = ''

          button.setAttribute('aria-pressed', 'false')
        }, 1500)
      })
    }
  }

  customElements.define('preview-copy', PreviewCopy)
</script>
